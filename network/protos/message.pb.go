// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Envelope
	Empty
	Message
	Block
	Transaction
	PeerTable
	PeerInfo
	ConsensusMessage
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Message struct {
	Channel []byte `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Block
	//	*Message_Transaction
	//	*Message_PeerTable
	//	*Message_PeerInfo
	//	*Message_ConsensusMessage
	Content isMessage_Content `protobuf_oneof:"content"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}
type Message_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,3,opt,name=transaction,oneof"`
}
type Message_PeerTable struct {
	PeerTable *PeerTable `protobuf:"bytes,4,opt,name=peerTable,oneof"`
}
type Message_PeerInfo struct {
	PeerInfo *PeerInfo `protobuf:"bytes,5,opt,name=peerInfo,oneof"`
}
type Message_ConsensusMessage struct {
	ConsensusMessage *ConsensusMessage `protobuf:"bytes,6,opt,name=consensusMessage,oneof"`
}

func (*Message_Block) isMessage_Content()            {}
func (*Message_Transaction) isMessage_Content()      {}
func (*Message_PeerTable) isMessage_Content()        {}
func (*Message_PeerInfo) isMessage_Content()         {}
func (*Message_ConsensusMessage) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *Message) GetBlock() *Block {
	if x, ok := m.GetContent().(*Message_Block); ok {
		return x.Block
	}
	return nil
}

func (m *Message) GetTransaction() *Transaction {
	if x, ok := m.GetContent().(*Message_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *Message) GetPeerTable() *PeerTable {
	if x, ok := m.GetContent().(*Message_PeerTable); ok {
		return x.PeerTable
	}
	return nil
}

func (m *Message) GetPeerInfo() *PeerInfo {
	if x, ok := m.GetContent().(*Message_PeerInfo); ok {
		return x.PeerInfo
	}
	return nil
}

func (m *Message) GetConsensusMessage() *ConsensusMessage {
	if x, ok := m.GetContent().(*Message_ConsensusMessage); ok {
		return x.ConsensusMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Block)(nil),
		(*Message_Transaction)(nil),
		(*Message_PeerTable)(nil),
		(*Message_PeerInfo)(nil),
		(*Message_ConsensusMessage)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *Message_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *Message_PeerTable:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerTable); err != nil {
			return err
		}
	case *Message_PeerInfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerInfo); err != nil {
			return err
		}
	case *Message_ConsensusMessage:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsensusMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 2: // content.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Block{msg}
		return true, err
	case 3: // content.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Transaction{msg}
		return true, err
	case 4: // content.peerTable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerTable)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PeerTable{msg}
		return true, err
	case 5: // content.peerInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerInfo)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PeerInfo{msg}
		return true, err
	case 6: // content.consensusMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConsensusMessage)
		err := b.DecodeMessage(msg)
		m.Content = &Message_ConsensusMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PeerTable:
		s := proto.Size(x.PeerTable)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PeerInfo:
		s := proto.Size(x.PeerInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ConsensusMessage:
		s := proto.Size(x.ConsensusMessage)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Block struct {
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Transaction struct {
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PeerTable struct {
	OwnerID string               `protobuf:"bytes,1,opt,name=OwnerID" json:"OwnerID,omitempty"`
	PeerMap map[string]*PeerInfo `protobuf:"bytes,2,rep,name=PeerMap" json:"PeerMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PeerTable) Reset()                    { *m = PeerTable{} }
func (m *PeerTable) String() string            { return proto.CompactTextString(m) }
func (*PeerTable) ProtoMessage()               {}
func (*PeerTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PeerTable) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *PeerTable) GetPeerMap() map[string]*PeerInfo {
	if m != nil {
		return m.PeerMap
	}
	return nil
}

type PeerInfo struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	PeerID    string `protobuf:"bytes,3,opt,name=peerID" json:"peerID,omitempty"`
	HeartBeat int32  `protobuf:"varint,4,opt,name=heartBeat" json:"heartBeat,omitempty"`
	PubKey    []byte `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PeerInfo) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *PeerInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PeerInfo) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *PeerInfo) GetHeartBeat() int32 {
	if m != nil {
		return m.HeartBeat
	}
	return 0
}

func (m *PeerInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ConsensusMessage struct {
	ConsensusID string `protobuf:"bytes,1,opt,name=ConsensusID" json:"ConsensusID,omitempty"`
	ViewID      string `protobuf:"bytes,2,opt,name=ViewID" json:"ViewID,omitempty"`
	SequenceID  int64  `protobuf:"varint,3,opt,name=SequenceID" json:"SequenceID,omitempty"`
	Block       *Block `protobuf:"bytes,4,opt,name=Block" json:"Block,omitempty"`
	PeerID      string `protobuf:"bytes,5,opt,name=PeerID" json:"PeerID,omitempty"`
	MsgType     int32  `protobuf:"varint,6,opt,name=MsgType" json:"MsgType,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ConsensusMessage) GetConsensusID() string {
	if m != nil {
		return m.ConsensusID
	}
	return ""
}

func (m *ConsensusMessage) GetViewID() string {
	if m != nil {
		return m.ViewID
	}
	return ""
}

func (m *ConsensusMessage) GetSequenceID() int64 {
	if m != nil {
		return m.SequenceID
	}
	return 0
}

func (m *ConsensusMessage) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ConsensusMessage) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *ConsensusMessage) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func init() {
	proto.RegisterType((*Envelope)(nil), "message.Envelope")
	proto.RegisterType((*Empty)(nil), "message.Empty")
	proto.RegisterType((*Message)(nil), "message.Message")
	proto.RegisterType((*Block)(nil), "message.Block")
	proto.RegisterType((*Transaction)(nil), "message.Transaction")
	proto.RegisterType((*PeerTable)(nil), "message.PeerTable")
	proto.RegisterType((*PeerInfo)(nil), "message.PeerInfo")
	proto.RegisterType((*ConsensusMessage)(nil), "message.ConsensusMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageService service

type MessageServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamClient, error)
	// Ping is used to probe a remote peer's aliveness
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[0], c.cc, "/message.MessageService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceStreamClient{stream}
	return x, nil
}

type MessageService_StreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type messageServiceStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/message.MessageService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	Stream(MessageService_StreamServer) error
	// Ping is used to probe a remote peer's aliveness
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).Stream(&messageServiceStreamServer{stream})
}

type MessageService_StreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type messageServiceStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MessageService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _MessageService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

// Client API for PeerService service

type PeerServiceClient interface {
	GetPeerInfo(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*PeerInfo, error)
}

type peerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPeerServiceClient(cc *grpc.ClientConn) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) GetPeerInfo(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*PeerInfo, error) {
	out := new(PeerInfo)
	err := grpc.Invoke(ctx, "/message.PeerService/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PeerService service

type PeerServiceServer interface {
	GetPeerInfo(context.Context, *PeerInfo) (*PeerInfo, error)
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.PeerService/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetPeerInfo(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerInfo",
			Handler:    _PeerService_GetPeerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x93, 0x3a, 0xae, 0xc7, 0x6d, 0x55, 0x56, 0x08, 0x99, 0x08, 0x41, 0x65, 0x21, 0xc8,
	0xa9, 0x20, 0x03, 0x52, 0xe1, 0x46, 0x49, 0xd4, 0x44, 0x55, 0x44, 0xb4, 0x89, 0x38, 0x70, 0xdb,
	0x38, 0x43, 0x6a, 0xd5, 0x59, 0x1b, 0x7b, 0x93, 0xca, 0xaf, 0xc0, 0xcb, 0xf0, 0x06, 0x9c, 0x78,
	0x30, 0xb4, 0xeb, 0xb5, 0x1d, 0xe2, 0x9b, 0xbf, 0x6f, 0xfe, 0xe7, 0x9b, 0x35, 0x9c, 0x6e, 0x30,
	0xcf, 0xd9, 0x1a, 0x2f, 0xd3, 0x2c, 0x11, 0x09, 0xb1, 0x35, 0xf4, 0xbf, 0xc3, 0xf1, 0x88, 0xef,
	0x30, 0x4e, 0x52, 0x24, 0x1e, 0xd8, 0x29, 0x2b, 0xe2, 0x84, 0xad, 0x3c, 0xf3, 0xc2, 0x1c, 0x9c,
	0xd0, 0x0a, 0x92, 0x67, 0xe0, 0xe4, 0xd1, 0x9a, 0x33, 0xb1, 0xcd, 0xd0, 0xeb, 0x28, 0x5b, 0x43,
	0x90, 0x27, 0xd0, 0x4b, 0xb7, 0xcb, 0x7b, 0x2c, 0xbc, 0xae, 0x32, 0x69, 0xe4, 0xdb, 0x60, 0x8d,
	0x36, 0xa9, 0x28, 0xfc, 0x3f, 0x1d, 0xb0, 0xa7, 0x65, 0x41, 0x59, 0x24, 0xbc, 0x63, 0x9c, 0x63,
	0x5c, 0x15, 0xd1, 0x90, 0xbc, 0x02, 0x6b, 0x19, 0x27, 0xe1, 0xbd, 0x2a, 0xe0, 0x06, 0x67, 0x97,
	0x55, 0xcb, 0xd7, 0x92, 0x1d, 0x1b, 0xb4, 0x34, 0x93, 0x2b, 0x70, 0x45, 0xc6, 0x78, 0xce, 0x42,
	0x11, 0x25, 0x5c, 0xd5, 0x74, 0x83, 0xc7, 0xb5, 0xf7, 0xa2, 0xb1, 0x8d, 0x0d, 0xba, 0xef, 0x4a,
	0x02, 0x70, 0x52, 0xc4, 0x6c, 0xc1, 0x96, 0x31, 0x7a, 0x47, 0x2a, 0x8e, 0xd4, 0x71, 0xb3, 0xca,
	0x32, 0x36, 0x68, 0xe3, 0x46, 0xde, 0xc0, 0xb1, 0x04, 0x13, 0xfe, 0x23, 0xf1, 0x2c, 0x15, 0xf2,
	0xe8, 0xbf, 0x10, 0x69, 0x18, 0x1b, 0xb4, 0x76, 0x22, 0x37, 0x70, 0x1e, 0x26, 0x3c, 0x47, 0x9e,
	0x6f, 0x73, 0x3d, 0xb4, 0xd7, 0x53, 0x81, 0x4f, 0xeb, 0xc0, 0x2f, 0x07, 0x0e, 0x63, 0x83, 0xb6,
	0x82, 0xae, 0x1d, 0xb0, 0xc3, 0x84, 0x0b, 0xe4, 0x42, 0x6e, 0x52, 0x2d, 0xc1, 0x3f, 0x05, 0x77,
	0x6f, 0x3e, 0xff, 0xb7, 0x09, 0x4e, 0xdd, 0xb7, 0x5c, 0xed, 0xd7, 0x07, 0x8e, 0xd9, 0x64, 0xa8,
	0x56, 0xeb, 0xd0, 0x0a, 0x92, 0x8f, 0x60, 0x4b, 0xb7, 0x29, 0x4b, 0xbd, 0xce, 0x45, 0x77, 0xe0,
	0x06, 0x2f, 0xda, 0x63, 0x5f, 0x6a, 0x8f, 0x11, 0x17, 0x59, 0x41, 0x2b, 0xff, 0xfe, 0x14, 0x4e,
	0xf6, 0x0d, 0xe4, 0x1c, 0xba, 0x52, 0xe9, 0xb2, 0x80, 0xfc, 0x24, 0xaf, 0xc1, 0xda, 0xb1, 0x78,
	0x8b, 0x5a, 0xb7, 0xf6, 0x7a, 0x68, 0x69, 0xff, 0xd4, 0xb9, 0x32, 0xfd, 0x5f, 0x26, 0x1c, 0x57,
	0xbc, 0x3c, 0xab, 0x28, 0xfd, 0xbc, 0x5a, 0x65, 0x98, 0xe7, 0x3a, 0x63, 0x43, 0x10, 0x02, 0x47,
	0x69, 0x92, 0x09, 0x95, 0xd6, 0xa1, 0xea, 0x5b, 0x9d, 0x1a, 0xaa, 0x09, 0xbb, 0x8a, 0xd5, 0x48,
	0x66, 0xba, 0x43, 0x96, 0x89, 0x6b, 0x64, 0x42, 0x29, 0x6b, 0xd1, 0x86, 0xd0, 0x07, 0x7a, 0x8b,
	0x85, 0x52, 0xb0, 0x3c, 0xd0, 0x5b, 0x2c, 0xfc, 0xbf, 0x26, 0x9c, 0x1f, 0x4a, 0x41, 0x2e, 0xc0,
	0xad, 0xb9, 0x7a, 0x93, 0xfb, 0x94, 0x4c, 0xf7, 0x2d, 0xc2, 0x87, 0xc9, 0x50, 0xb7, 0xa6, 0x11,
	0x79, 0x0e, 0x30, 0xc7, 0x9f, 0x5b, 0xe4, 0x21, 0xea, 0x06, 0xbb, 0x74, 0x8f, 0x21, 0x2f, 0xb5,
	0x8a, 0xfa, 0xf4, 0x0e, 0x0e, 0x9c, 0x96, 0x46, 0x99, 0x7d, 0x56, 0x8e, 0x68, 0x95, 0xd9, 0x4b,
	0x24, 0xd5, 0x9d, 0xe6, 0xeb, 0x45, 0x91, 0x96, 0xe7, 0x64, 0xd1, 0x0a, 0x06, 0x29, 0x9c, 0xe9,
	0xe6, 0xe7, 0x98, 0xed, 0xa2, 0x10, 0xc9, 0x7b, 0xe8, 0xcd, 0x45, 0x86, 0x6c, 0x43, 0x1a, 0x35,
	0xaa, 0x67, 0xde, 0x6f, 0x53, 0xbe, 0x31, 0x30, 0xdf, 0x9a, 0x64, 0x00, 0x47, 0xb3, 0x88, 0xaf,
	0x49, 0xd3, 0x98, 0x7a, 0xbe, 0xfd, 0x03, 0xec, 0x1b, 0xc1, 0x10, 0x5c, 0xd9, 0x55, 0x55, 0xee,
	0x03, 0xb8, 0x37, 0x28, 0x6a, 0x59, 0xdb, 0x17, 0xd0, 0x6f, 0x53, 0xbe, 0xb1, 0xec, 0xa9, 0x7f,
	0xd1, 0xbb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x28, 0xcd, 0xef, 0x9c, 0x04, 0x00, 0x00,
}
