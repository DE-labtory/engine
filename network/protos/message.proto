syntax = "proto3";

package message;

service MessageService{

    rpc Stream (stream Envelope) returns (stream Envelope) {}
    // Ping is used to probe a remote peer's aliveness
    rpc Ping (Empty) returns (Empty) {}
}

service PeerService{
    rpc GetPeerInfo (PeerInfo) returns (PeerInfo) {}
}

message Envelope {

    //marshalled Message
    bytes payload = 1;

    // signed Message
    bytes signature = 2;

    // sender's public key
    bytes pubkey = 3;
}

message Empty {}

message Message{

    bytes channel = 1;

    oneof content{
        Block block = 2;
        Transaction transaction = 3;
        PeerTable peerTable = 4;
        PeerInfo peerInfo = 5;
        ConsensusMessage consensusMessage= 6;
    }
}

message Block{

}

message Transaction{

}

message PeerTable{
    string OwnerID = 1;
    map <string, PeerInfo> PeerMap= 2;
}

message PeerInfo {
    string ipAddress = 1;
    string port = 2;
    string peerID = 3;
    int32 heartBeat = 4;
    bytes pubKey = 5;
}

message ConsensusMessage {
    string ConsensusID = 1;
    string ViewID = 2;
    int64 SequenceID = 3;
    Block Block = 4;
    string PeerID = 5;
    int32 MsgType = 6;
}


